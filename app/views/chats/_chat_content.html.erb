<div id="add_people" style="display:none;">
		<%= render :partial=>'projects/invite',:locals=>{:users=>users}%>
		</div>
<div class="m-panel-contain">
  <div class="m-panel">
  <%= socky :channels=>project.id,:client_id =>current_user.id%>
    <div class="sub-header">Participants</div>
    <%=hidden_field_tag "soc_user",current_user.id,:id=>"soc_user"%>
    <%project.online_members.each do |user|%>
      <%unless user==current_user%>
        <div class="m-tab <%= cycle('alt', '') %>" id="ui<%=user.id%>">
          <div class="left-icons">
            <div class="avatar-mini"></div>
            <img alt="avatar" class="avatar-mini-img" src="<%=user.image_url%>"/>
          </div>
          <div class="info">
            <span class="position"><%=user.title%></span><br/>
            <span class="name"><%=user.full_name%></span>
            <span class="p-number"><%=user.phone%></span>
            <span class="email"><a href="mailto:<%=user.email%>"><%=user.email%></a></span>
          </div>
          <%=clear_fix%>
        </div>
      <%end%>
    <%end%>
  </div>
</div>

<div class="r-panel-contain">
  <div class="r-panel">
    <div class="comment-contain">
      <div class="comment-input no-attach">
        <label class="hidden">Message:</label>
				<textarea cols="" rows="" onfocus="this.select()" id="chat-message" class="textarea comment-message" name="message"></textarea>
        <div class="chat-right">
          <a class="attach" href="javascript:show_drag_and_drop();" ondragover="javascript:show_drag_and_drop();" ></a>
          <input type="submit" value="Send" class="chat-send" id="chat-send"></input>
        </div>
        <%=clear_fix%>
      </div>
      <div class="attach-contain" style="display:none;">
				<% form_for :attachs, :url=>{:controller=>"attachments", :action=>"create"}, :html=>{:multipart=>true, :id=>"form4"} do |f3| %>
          <input type="hidden" id="attach_hidden" name="attach_id" value=""/>
          <fieldset id="attach" class="open">
            <div id="loader1" style="display:none;">
               <img src="/images/spinner.gif" />
            </div>

            <div  id="attach_upload" class="attachment-upload" style="min-height:62px;">
              <div class="drag-drop">Drag and drop files here</div>
              <div id="files"></div>
              <div id="attachment_files"> </div>
            </div>
          </fieldset>
          <button id="start_uploads", style="display:none;">Start uploads</button>
        <% end %>
        <iframe id='upload_frame' name="upload_frame" style="width:0px;height:0px;border:0px;display:none" src="about:blank"></iframe>
      <%=clear_fix%>
    </div>

  </div>
  <div class="chat-container">
				
    <%=hidden_field_tag "chat[project_id]",project.id,:id=>"chat_project_id"%>
    <%=hidden_field_tag "page",20,:id=>"page_number"%>
    <%user_id=0%>
    <%project.recent_chats.each do |chat|%>
      <%user_id=chat.user_id%>
      <div class="message">
        <div class="color" style="background-color:<%=chat.user_color%>"></div>
        <div class="name"><span><%=chat.user_name%></span></div>
        <div class="content most-recent"><%=chat.message%>
        <%unless chat.attachments.empty?%>
          <div class="attachments">
          <%chat.attach_urls.each do |attach_type,value|%>
            <%if attach_type==:attached_documents%>
                <%value.each do |attach|%>
                  <%=raw attach%><br/>
                <%end%>
            <%else%>
              <%value.each do |attach|%>
                 <div class="attachment-thumb-frame"><%=raw attach%></div>
                <%end%>
            <%end%>
          <%end%>
          </div>
        <%end%>
      </div>
      </div>
    <%end%>
    <%=clear_fix%>
		</div>
</div>
<script>

// Set URL of your WebSocketMain.swf here:
WEB_SOCKET_SWF_LOCATION = "/javascripts/socky/WebSocketMain.swf";
// Set this to dump debug message from Flash to console.log:
WEB_SOCKET_DEBUG = false;

Socky = function(host, port, params) {
  this.host = host;
  this.port = port;
  this.params = params;
  this.connect();
};

// Socky states
Socky.CONNECTING = 0;
Socky.AUTHENTICATING = 1;
Socky.OPEN = 2;
Socky.CLOSED = 3;
Socky.UNAUTHENTICATED = 4;

Socky.prototype.connect = function() {
  var instance = this;
  instance.state = Socky.CONNECTING;

  var ws = new WebSocket(this.host + ':' + this.port + '/?' + this.params);
  ws.onopen    = function()    { instance.onopen(); };
  ws.onmessage = function(evt) { instance.onmessage(evt); };
  ws.onclose   = function()    { instance.onclose(); };
  ws.onerror   = function()    { instance.onerror(); };
};



// ***** Private methods *****
// Try to avoid any modification of these methods
// Modification of these methods may cause script to work invalid
// Please see 'public methods' below
// ***************************

// Called when connection is opened
Socky.prototype.onopen = function() {
  this.state = Socky.AUTHENTICATING;
	this.respond_to_connect();
};

// Called when socket message is received
Socky.prototype.onmessage = function(evt) {
  try {
    var request = JSON.parse(evt.data);
    switch (request.type) {
      case "message":
        this.respond_to_message(request.body);
        break;
      case "authentication":
        if(request.body == "success") {
					this.state = Socky.OPEN;
          this.respond_to_authentication_success();
        } else {
					this.state = Socky.UNAUTHENTICATED;
          this.respond_to_authentication_failure();
        }
        break;
    }
  } catch (e) {
    console.error(e.toString());
  }
};

// Called when socket connection is closed
Socky.prototype.onclose = function() {
  if(this.state != Socky.CLOSED && this.state != Socky.UNAUTHENTICATED) {
    this.respond_to_disconnect();
  }
};

// Called when error occurs
// Currently unused
Socky.prototype.onerror = function() {};



// ***** Public methods *****
// These methods can be freely modified.
// The change should not affect the normal operation of the script.
// **************************

// Called after connection but before authentication confirmation is received
// At this point user is still not allowed to receive messages
Socky.prototype.respond_to_connect = function() {
};

// Called when authentication confirmation is received.
// At this point user will be able to receive messages
Socky.prototype.respond_to_authentication_success = function() {
};

// Called when authentication is rejected by server
// This usually means that secret is invalid or that authentication server is unavailable
// This method will NOT be called if connection with Socky server will be broken - see respond_to_disconnect
Socky.prototype.respond_to_authentication_failure = function() {
};

// Called when new message is received
// Note that msg is not sanitized - it can be any script received.
Socky.prototype.respond_to_message = function(msg) {
  eval(msg);
};

// Called when connection is broken between client and server
// This usually happens when user lost his connection or when Socky server is down.
// At default it will try to reconnect after 1 second.
Socky.prototype.respond_to_disconnect = function() {
    var instance = this;
    setTimeout(function() { instance.connect(); }, 1000);
}





$.chat=0;
  $('.chat-container').scroll(function(){	
    var page_number=parseInt($('#page_number').val());
    var project_id=$('#chat_project_id').val();
    if($('.chat-container').scrollTop() > ($('.chat-container').position().top + $('.chat-container').height()) && page_number!=0)
    {
      $.ajax({
        url:'/load_more/'+project_id+'?page='+page_number,
        type:'get',
        success:function(data){
          $('.chat-container').append(data);
          if(data.length==0)
            $('#page_number').val(0);
          else
            $('#page_number').val(page_number+20);
        }
      });
    }

  });
	inputHeight = $('.comment-contain')[0].offsetHeight;
  panelHeight = $('.r-panel-contain')[0].offsetHeight;
  $('.chat-container')[0].style.height = (panelHeight - inputHeight - 30) +"px";

	function show_drag_and_drop()
	{
	
    if ($('.attach-contain').css('display')=="block")
    {
      $('.attach-contain').css('display','none');
      $('.attach').show();
    }
    else
    {
      $('.attach-contain').css('display','block');
      $('.attach').hide();
    }
	}
	var attachitem=[];
		$(function () {
    $('#form4').fileUploadUI({
    uploadTable: $('#files'),
      downloadTable: $('#attachment_files'),
      buildUploadRow: function (files, index) {
				$.chat=$.chat+1;
				 var original=files[index].name;
        var b=original.lastIndexOf('.')
        var c=original.substring(b)
        var d=original.split(c)[0]
                var file1=original
        if(d.length > 20)
        {
          var e=d.substring(original,20)
          file1=e.concat(c)
        }
			   return $('<div id="attachment_' + $.chat + '" class="attachment"><div class="left">'+'<span class="upload-amt" id="upload_' +d+'"> </span>' +'<span class="filename">' + file1+ '</span></div>'+'<div class="file_upload_cancel">' +
            '<a class="ui-state-default ui-corner-all" >' +
            '<span class="ui-icon ui-icon-cancel">Remove</span>' +
            '</a></div>'+'</div>');
      },
      buildDownloadRow: function (file) {
        a=file.id;
        var original=file.file
        var b=original.lastIndexOf('.')
        var c=original.substring(b)
        var d=original.split(c)[0]
        var file1=original
        if(d.length > 20)
        {
          var e=d.substring(original,20)
          file1=e.concat(c)
        }
        attachitem.push(a);
        document.getElementById('attach_hidden').value=attachitem;
				
        return $('<div id="attachment_' + a + '" class="attachment"><div class="left">'+'<span class="upload-amt">'+file.size+'KB / '+ file.size +'KB  </span>' +'<span class="filename">' + file1+ '</span></div>'+'<a href="javascript:delete_attachment('+a+');"> Remove </a>'+'</div>');
      },
      onComplete:function (event, files, index, xhr, handler) {
        $('#loader1').hide();
        	$('#chat-send').css('cursor','pointer');
      },
      onProgress: function (event, files, index, xhr, handler) {
							 var original=files[index].name;
        var b=original.lastIndexOf('.')
        var c=original.substring(b)
        var d=original.split(c)[0]
        var total=parseInt(event.total/1024)+" KB";
        		$('#chat-send').css('cursor','progress');
        $("#upload_" + d).html(parseInt(event.loaded/1024)+' KB / '+total);
      }
});
});
function delete_attachment(file)
{
attachitem.pop(file);
 document.getElementById('attach_hidden').value=attachitem;
  $.ajax({
    url:'/remove_attach/'+file,
    type: 'get',
    success: function(file){
      $('#attachment_'+file).remove();
    }
  });
}
	
	</script>

